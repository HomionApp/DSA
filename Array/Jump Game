Link - https://practice.geeksforgeeks.org/problems/minimum-number-of-jumps-1587115620/1
     - https://leetcode.com/problems/jump-game-ii/

-> Both approach works for both cases, i.e if reaching the end is guaranteed or not

class Solution {
    public int jump(int[] arr) {
        if(arr.length == 1) return 0;
        if(arr[0]==0) return -1;
        int i=0, j=1, k = -1, index = 0, count = 1;
        while(j<arr.length){
            if(j <= arr[i] + i){
                if(arr[j] + j > k){
                    k = arr[j]+j;
                    index = j;
                }
                j++;
            }
            else{
                if(j > arr[index] + index) return -1;
                i = index;
                count++;
            }
        }
        return count;
    }
}

/-----------------------------------2nd Approach--------------------------------------------------/

class Solution{
    static int minJumps(int[] arr){
        if(arr.length == 1) return 0;
        if(arr[0] == 0) return -1;
        int maxReach = 0, currReach = 0, jumps = 0;
        for(int i = 0;i<arr.length-1;i++){
            maxReach = Math.max(maxReach, arr[i]+i);
            if(i == currReach){
                jumps++;
                currReach = maxReach;
                if(maxReach >= arr.length-1) return jumps;
                if(arr[i]==0) return -1;
            }
        }
        return jumps;
    }
}
