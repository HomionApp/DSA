Find Missing And Repeating
https://practice.geeksforgeeks.org/problems/find-missing-and-repeating2512/1

***** Approach 1 ******

class Solve {
    int[] findTwoElement(int arr[], int n) {
        
        int i = 0;
        while(i < n) {
            if(arr[i] != arr[arr[i]-1]) {
                int j = arr[i]-1;
                int t = arr[i];
                arr[i] = arr[j];
                arr[j] = t;
            } else {
                i++;
            }
        }
        
        for(int k = 0; k < n; k++) {
            if(arr[k] != k+1) {
                return new int[]{arr[k], k+1};
            }
        }
        
        return new int[]{};
    }
}


***** Approach 2 *****

class Solution {
    public int findDuplicate(int[] nums) {
       for(int i = 0 ; i < nums.length ; i++){
           int idx = Math.abs(nums[i])-1;
           int val = nums[idx];
           if(val < 0){
               return idx+1;
           }else{
               nums[idx] = nums[idx]*-1;
           }
       }
        return 0;
    }
}


***** Approach 3 ******

class Solution {
    public int findDuplicate(int[] nums) {
        
   if (nums.length > 1)
	{
		int slow = nums[0];
		int fast = nums[nums[0]];
		while (slow != fast)
		{
			slow = nums[slow];
			fast = nums[nums[fast]];
		}

		fast = 0;
		while (fast != slow)
		{
			fast = nums[fast];
			slow = nums[slow];
		}
		return slow;
	}
	return -1;
        
    }
}


**** Approach 4 ****

class Solve {
    int[] findTwoElement(int arr[], int n) {
        
        long exp = n * (n+1) / 2;
        long sum = 0;
        for(int i: arr) sum += i;
        int diff = (int)(exp - sum);
        
        long exp2 = (n * (n+1) *(2*n+1)) / 6;
        long sum2 = 0;
        for(int i: arr) sum2 += i*i;
        int add = (int)((exp2-sum2)/diff);
        
        int missing = (add + diff)/2;
        int repeating = (add - diff)/2;
        
        return new int[]{repeating, missing};
    }
}
