Link - https://leetcode.com/problems/trapping-rain-water/

Brute Force - Iterate over the array and find unit of water stored for each building, by finding the left max and right max for each one.
TC - O(N2)
SC - O(N)

------------------------------------------------------------------------------------------------

class Solution{
    static long trappingWater(int arr[], int n) { 
        int [] left = new int[n];
        int [] right = new int[n];
        left[0] = 0;
        right[n-1] = 0;
        int i=0, max = arr[0];
        for(i=1;i<n;i++){
            max = Math.max(max, arr[i]);
            left[i] = max;
        }
        max = arr[n-1];
        for(i = n-2;i>=0;i--){
            max = Math.max(max, arr[i]);
            right[i] = max;
        }
        int water = 0;
        for(i=1;i<n-1;i++){
            water += Math.abs(Math.min(left[i], right[i]) - arr[i]);
        }
        return water;
    } 
}

SC - O(N)
TC - O(N)

-------------------------------------------------------------------------------------------

class Solution {
    public int trap(int[] arr) {
        int leftMax = 0, rightMax = 0, water = 0;
        int left = 0, right = arr.length-1;
        while(left < right){
            if(arr[left] <= arr[right]){
                if(arr[left] >= leftMax) leftMax = arr[left];
                else water += leftMax - arr[left];
                left++;
            }else{
                if(arr[right] >= rightMax) rightMax = arr[right];
                else water += rightMax - arr[right];
                right--;
            }
        }
        return water;
    }
}

SC - O(1)
TC - O(N)
